@use "sass:math";

/*============================================================================
  Debut | Built with Shopify Slate

  Some things to know about this file:
    - Sass is compiled on Shopify's server so you don't need to convert it to CSS yourself
    - The output CSS is compressed and comments are removed
    - You cannot use native CSS/Sass @imports in this file without a build script
==============================================================================*/

/*================ SASS HELPERS ================*/
/*============================================================================
  Convert pixels to ems
  eg. for a relational value of 12px write em(12) when the parent is 16px
  if the parent is another value say 24px write em(12, 24)
  Based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_px-to-em.scss
==============================================================================*/
@function em($pxval, $base: $font-size-base) {
    @if not unitless($pxval) {
      $pxval: strip-units($pxval);
    }
  
    @if not unitless($base) {
      $base: strip-units($base);
    }
  
    @return ($pxval / $base) * 1em;
  }
  
  /*============================================================================
    Strips the unit from a number.
    @param {Number (With Unit)} $value
    @example scss - Usage
      $dimension: strip-units(10em);
    @example css - CSS Output
      $dimension: 10;
    @return {Number (Unitless)}
    based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_strip-units.scss
  ==============================================================================*/
  @function strip-units($value) {
    @return ($value / ($value * 0 + 1));
  }
  
  /*============================================================================
    Return a color based on the brightness of an existing color.
    Need to pass in brightness because it is calculated with Liquid.
    @param {Number} $brightness
    @param {String} $color
    @example scss - Usage
      $focusColor: adaptiveColor(#000, 0);
    @example css - CSS Output
      $focusColor: #404040;
    @return {String}
  
    @adaptiveColor used for changing text
    @adaptiveBackgroundColor used for background colors where the change doesn't
    need to be as strong
  ==============================================================================*/
  
  @function adaptiveColor($color, $brightness) {
    @if $brightness <=26 {
      @return lighten($color, 25%)
    }
  
    @if $brightness <=64 {
      @return lighten($color, 15%)
    }
  
    @else {
      @return darken($color, 10%)
    }
  }
  
  @function adaptiveBackgroundColor($color, $brightness) {
    @if $brightness <=26 {
      @return lighten($color, 15%)
    }
  
    @if $brightness <=64 {
      @return lighten($color, 10%)
    }
  
    @else {
      @return darken($color, 5%)
    }
  }
  
  /*================ #Mixins ================*/
  @mixin clearfix() {
    &::after {
      content: '';
      display: table;
      clear: both;
    }
  
    // sass-lint:disable no-misspelled-properties
    *zoom: 1;
  }
  
  /*============================================================================
    Prefix mixin for generating vendor prefixes.
    Based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_prefixer.scss
  
    Usage:
      // Input:
      .element {
        @include prefix(transform, scale(1), ms webkit spec);
      }
  
      // Output:
      .element {
        -ms-transform: scale(1);
        -webkit-transform: scale(1);
        transform: scale(1);
      }
  ==============================================================================*/
  @mixin prefix($property, $value, $prefixes) {
    @each $prefix in $prefixes {
      @if $prefix==webkit {
        -webkit-#{$property}: $value;
      }
  
      @else if $prefix==moz {
        -moz-#{$property}: $value;
      }
  
      @else if $prefix==ms {
        -ms-#{$property}: $value;
      }
  
      @else if $prefix==o {
        -o-#{$property}: $value;
      }
  
      @else if $prefix==spec {
        #{$property}: $value;
      }
  
      @else {
        @warn 'Unrecognized prefix: #{$prefix}';
      }
    }
  }
  
  @mixin user-select($value: none) {
    @include prefix('user-select', #{$value}, moz ms webkit spec);
  }
  
  /*================ Media Query Mixin ================*/
  @mixin media-query($media-query) {
    $breakpoint-found: false;
  
    @each $breakpoint in $grid-breakpoints {
      $name: nth($breakpoint, 1);
      $declaration: nth($breakpoint, 2);
  
      @if $media-query==$name and $declaration {
        $breakpoint-found: true;
  
        @media only screen and #{$declaration} {
          @content;
        }
      }
    }
  
    @if $breakpoint-found==false {
      @warn 'Breakpoint "#{$media-query}" does not exist';
    }
  }
  
  /*================ Responsive Show/Hide Helper ================*/
  @mixin responsive-display-helper($grid-breakpoint-type: '') {
  
    // sass-lint:disable no-important
    .#{$grid-breakpoint-type}show {
      display: block !important;
    }
  
    .#{$grid-breakpoint-type}hide {
      display: none !important;
    }
  }
  
  
  /*================ Responsive Text Alignment Helper ================*/
  @mixin responsive-text-align-helper($grid-breakpoint-type: '') {
  
    // sass-lint:disable no-important
    .#{$grid-breakpoint-type}text-left {
      text-align: left !important;
    }
  
    .#{$grid-breakpoint-type}text-right {
      text-align: right !important;
    }
  
    .#{$grid-breakpoint-type}text-center {
      text-align: center !important;
    }
  }
  
  @mixin placeholder-text($color: $color-text-field-text, $opacity: 0.6) {
    color: $color;
    opacity: $opacity;
  }
  
  @mixin error-placeholder-text($color: $color-error-input-text, $opacity: 0.5) {
    color: $color;
    opacity: $opacity;
  }
  
  @mixin transform($transform) {
    @include prefix(transform, $transform, ms webkit spec);
  }
  
  @mixin transition($transition) {
    @include prefix(transition, $transition, ms webkit spec);
  }
  
  @mixin gradient($side, $from, $to) {
    background: -ms-linear-gradient($side, $from 0%, $to 100%);
    background: linear-gradient(to $side, $from 0%, $to 100%);
  }
  
  @mixin spinner($size: $icon-size, $color: $color-btn-primary-text) {
    content: '';
    display: block;
    width: $size;
    height: $size;
    position: absolute;
    margin-left: - $size / 2;
    margin-top: - $size / 2;
    border-radius: 50%;
    border: 3px solid $color;
    border-top-color: transparent;
  }
  
  // Toggle visibility + opacity + pointer-events
  // @param {Boolean} $state - Switch visibility "on" `(true)` or "off" `(false)`. Defaults to `true`.
  @mixin visible($isVisible: true) {
    @if ($isVisible) {
      opacity: 1;
      visibility: visible;
      pointer-events: auto;
    }
  
    @else {
      opacity: 0;
      visibility: hidden;
      pointer-events: none;
    }
  }
  
  @mixin visually-hidden() {
    // sass-lint:disable no-important
    position: absolute !important;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
  }
  
  @mixin visually-shown() {
    // sass-lint:disable no-important
    position: inherit !important;
    overflow: auto;
    clip: auto;
    width: auto;
    height: auto;
    margin: 0;
  }
  
  @mixin overlay($z-index: null) {
    &::before {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: $color-image-overlay;
      opacity: $opacity-image-overlay;
  
      @if ($z-index) {
        z-index: $z-index;
      }
    }
  }
  
  @mixin default-focus-ring() {
    outline: 1px dotted #212121;
    outline: 5px auto -webkit-focus-ring-color;
  }
  
  @mixin unstyled-button {
    appearance: none;
    margin: 0;
    padding: 0;
    background: none;
    border: none;
    font-size: inherit;
    line-height: inherit;
    cursor: pointer;
  }
  
  @mixin product-vendor {
    color: $color-body-text;
    font-size: 0.9em;
    font-weight: $font-weight-body;
    text-transform: uppercase;
    // letter-spacing: 1px;
  }
  
  /*============================================================================
    Flexbox prefix mixins from Bourbon
      https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_flex-box.scss
  ==============================================================================*/
  
  @mixin display-flexbox() {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    // necessary for ie10
    width: 100%;
  }
  
  @mixin flex-wrap($value: nowrap) {
    @include prefix(flex-wrap, $value, webkit moz ms spec);
  }
  
  @mixin flex-direction($value) {
    @include prefix(flex-direction, $value, webkit moz ms spec);
  }
  
  @mixin align-items($value: stretch) {
    $alt-value: $value;
  
    @if $value=='flex-start' {
      $alt-value: start;
    }
  
    @else if $value=='flex-end' {
      $alt-value: end;
    }
  
    // sass-lint:disable no-misspelled-properties
    -ms-flex-align: $alt-value;
    @include prefix(align-items, $value, webkit moz ms o spec);
  }
  
  @mixin flex($value: 0 1 auto) {
    @include prefix(flex, $value, webkit moz ms spec);
  }
  
  @mixin flex-basis($width: auto) {
    // sass-lint:disable no-misspelled-properties
    -ms-flex-preferred-size: $width;
    @include prefix(flex-basis, $width, webkit moz spec);
  }
  
  @mixin align-self($align: auto) {
    // sass-lint:disable no-misspelled-properties
    -ms-flex-item-align: $align;
    @include prefix(align-self, $align, webkit spec);
  }
  
  @mixin align-content($align: center) {
    @include prefix(align-content, $align, webkit ms spec);
  }
  
  @mixin justify-content($justify: flex-start) {
    @include prefix(justify-content, $justify, webkit ms spec);
  }

  
/*============================================================================
    Grid Columns
      - Create width classes, prepended by the breakpoint name.
  ==============================================================================*/
  // sass-lint:disable brace-style empty-line-between-blocks
  @mixin grid-column-generator($grid-breakpoint-type: '') {
    /* Whole */
    .#{$grid-breakpoint-type}one-whole { width: 100%; }
  
    /* Halves */
    .#{$grid-breakpoint-type}one-half { width: percentage(math.div(1, 2)); }
  
    /* Thirds */
    .#{$grid-breakpoint-type}one-third { width: percentage(math.div(1, 3)); }
    .#{$grid-breakpoint-type}two-thirds { width: percentage(math.div(2, 3)); }
  
    /* Quarters */
    .#{$grid-breakpoint-type}one-quarter { width: percentage(math.div(1, 4)); }
    .#{$grid-breakpoint-type}two-quarters { width: percentage(math.div(2, 4)); }
    .#{$grid-breakpoint-type}three-quarters { width: percentage(math.div(3, 4)); }
  
    /* Fifths */
    .#{$grid-breakpoint-type}one-fifth { width: percentage(math.div(1, 5)); }
    .#{$grid-breakpoint-type}two-fifths { width: percentage(math.div(2, 5)); }
    .#{$grid-breakpoint-type}three-fifths { width: percentage(math.div(3, 5)); }
    .#{$grid-breakpoint-type}four-fifths { width: percentage(math.div(4, 5)); }
  
    /* Sixths */
    .#{$grid-breakpoint-type}one-sixth { width: percentage(math.div(1, 6)); }
    .#{$grid-breakpoint-type}two-sixths { width: percentage(math.div(2, 6)); }
    .#{$grid-breakpoint-type}three-sixths { width: percentage(math.div(3, 6)); }
    .#{$grid-breakpoint-type}four-sixths { width: percentage(math.div(4, 6)); }
    .#{$grid-breakpoint-type}five-sixths { width: percentage(math.div(5, 6)); }
  
    /* Eighths */
    .#{$grid-breakpoint-type}one-eighth { width: percentage(math.div(1, 8)); }
    .#{$grid-breakpoint-type}two-eighths { width: percentage(math.div(2, 8)); }
    .#{$grid-breakpoint-type}three-eighths { width: percentage(math.div(3, 8)); }
    .#{$grid-breakpoint-type}four-eighths { width: percentage(math.div(4, 8)); }
    .#{$grid-breakpoint-type}five-eighths { width: percentage(math.div(5, 8)); }
    .#{$grid-breakpoint-type}six-eighths { width: percentage(math.div(6, 8)); }
    .#{$grid-breakpoint-type}seven-eighths { width: percentage(math.div(7, 8)); }
  
    /* Tenths */
    .#{$grid-breakpoint-type}one-tenth { width: percentage(math.div(1, 10)); }
    .#{$grid-breakpoint-type}two-tenths { width: percentage(math.div(2, 10)); }
    .#{$grid-breakpoint-type}three-tenths { width: percentage(math.div(3, 10)); }
    .#{$grid-breakpoint-type}four-tenths { width: percentage(math.div(4, 10)); }
    .#{$grid-breakpoint-type}five-tenths { width: percentage(math.div(5, 10)); }
    .#{$grid-breakpoint-type}six-tenths { width: percentage(math.div(6, 10)); }
    .#{$grid-breakpoint-type}seven-tenths { width: percentage(math.div(7, 10)); }
    .#{$grid-breakpoint-type}eight-tenths { width: percentage(math.div(8, 10)); }
    .#{$grid-breakpoint-type}nine-tenths { width: percentage(math.div(9, 10)); }
  
    /* Twelfths */
    .#{$grid-breakpoint-type}one-twelfth { width: percentage(math.div(1, 12)); }
    .#{$grid-breakpoint-type}two-twelfths { width: percentage(math.div(2, 12)); }
    .#{$grid-breakpoint-type}three-twelfths { width: percentage(math.div(3, 12)); }
    .#{$grid-breakpoint-type}four-twelfths { width: percentage(math.div(4, 12)); }
    .#{$grid-breakpoint-type}five-twelfths { width: percentage(math.div(5, 12)); }
    .#{$grid-breakpoint-type}six-twelfths { width: percentage(math.div(6, 12)); }
    .#{$grid-breakpoint-type}seven-twelfths { width: percentage(math.div(7, 12)); }
    .#{$grid-breakpoint-type}eight-twelfths { width: percentage(math.div(8, 12)); }
    .#{$grid-breakpoint-type}nine-twelfths { width: percentage(math.div(9, 12)); }
    .#{$grid-breakpoint-type}ten-twelfths { width: percentage(math.div(10, 12)); }
    .#{$grid-breakpoint-type}eleven-twelfths { width: percentage(math.div(11, 12)); }
  }
  
  /*================ Grid push classes ================*/
  @mixin grid-push-generator($grid-breakpoint-type: '') {
    /* Halves */
    .#{$grid-breakpoint-type}push-one-half { left: percentage(math.div(1, 2)); }
  
    /* Thirds */
    .#{$grid-breakpoint-type}push-one-third { left: percentage(math.div(1, 3)); }
    .#{$grid-breakpoint-type}push-two-thirds { left: percentage(math.div(2, 3)); }
  
    /* Quarters */
    .#{$grid-breakpoint-type}push-one-quarter { left: percentage(math.div(1, 4)); }
    .#{$grid-breakpoint-type}push-two-quarters { left: percentage(math.div(2, 4)); }
    .#{$grid-breakpoint-type}push-three-quarters { left: percentage(math.div(3, 4)); }
  
    /* Fifths */
    .#{$grid-breakpoint-type}push-one-fifth { left: percentage(math.div(1, 5)); }
    .#{$grid-breakpoint-type}push-two-fifths { left: percentage(math.div(2, 5)); }
    .#{$grid-breakpoint-type}push-three-fifths { left: percentage(math.div(3, 5)); }
    .#{$grid-breakpoint-type}push-four-fifths { left: percentage(math.div(4, 5)); }
  
    /* Sixths */
    .#{$grid-breakpoint-type}push-one-sixth { left: percentage(math.div(1, 6)); }
    .#{$grid-breakpoint-type}push-two-sixths { left: percentage(math.div(2, 6)); }
    .#{$grid-breakpoint-type}push-three-sixths { left: percentage(math.div(3, 6)); }
    .#{$grid-breakpoint-type}push-four-sixths { left: percentage(math.div(4, 6)); }
    .#{$grid-breakpoint-type}push-five-sixths { left: percentage(math.div(5, 6)); }
  
    /* Eighths */
    .#{$grid-breakpoint-type}push-one-eighth { left: percentage(math.div(1, 8)); }
    .#{$grid-breakpoint-type}push-two-eighths { left: percentage(math.div(2, 8)); }
    .#{$grid-breakpoint-type}push-three-eighths { left: percentage(math.div(3, 8)); }
    .#{$grid-breakpoint-type}push-four-eighths { left: percentage(math.div(4, 8)); }
    .#{$grid-breakpoint-type}push-five-eighths { left: percentage(math.div(5, 8)); }
    .#{$grid-breakpoint-type}push-six-eighths { left: percentage(math.div(6, 8)); }
    .#{$grid-breakpoint-type}push-seven-eighths { left: percentage(math.div(7, 8)); }
  
    /* Tenths */
    .#{$grid-breakpoint-type}push-one-tenth { left: percentage(math.div(1, 10)); }
    .#{$grid-breakpoint-type}push-two-tenths { left: percentage(math.div(2, 10)); }
    .#{$grid-breakpoint-type}push-three-tenths { left: percentage(math.div(3, 10)); }
    .#{$grid-breakpoint-type}push-four-tenths { left: percentage(math.div(4, 10)); }
    .#{$grid-breakpoint-type}push-five-tenths { left: percentage(math.div(5, 10)); }
    .#{$grid-breakpoint-type}push-six-tenths { left: percentage(math.div(6, 10)); }
    .#{$grid-breakpoint-type}push-seven-tenths { left: percentage(math.div(7, 10)); }
    .#{$grid-breakpoint-type}push-eight-tenths { left: percentage(math.div(8, 10)); }
    .#{$grid-breakpoint-type}push-nine-tenths { left: percentage(math.div(9, 10)); }
  
    /* Twelfths */
    .#{$grid-breakpoint-type}push-one-twelfth { left: percentage(math.div(1, 12)); }
    .#{$grid-breakpoint-type}push-two-twelfths { left: percentage(math.div(2, 12)); }
    .#{$grid-breakpoint-type}push-three-twelfths { left: percentage(math.div(3, 12)); }
    .#{$grid-breakpoint-type}push-four-twelfths { left: percentage(math.div(4, 12)); }
    .#{$grid-breakpoint-type}push-five-twelfths { left: percentage(math.div(5, 12)); }
    .#{$grid-breakpoint-type}push-six-twelfths { left: percentage(math.div(6, 12)); }
    .#{$grid-breakpoint-type}push-seven-twelfths { left: percentage(math.div(7, 12)); }
    .#{$grid-breakpoint-type}push-eight-twelfths { left: percentage(math.div(8, 12)); }
    .#{$grid-breakpoint-type}push-nine-twelfths { left: percentage(math.div(9, 12)); }
    .#{$grid-breakpoint-type}push-ten-twelfths { left: percentage(math.div(10, 12)); }
    .#{$grid-breakpoint-type}push-eleven-twelfths { left: percentage(math.div(11, 12)); }
  }
  
  /*================ Clearfix helper on uniform grids ================*/
  @mixin grid-uniform-clearfix($grid-breakpoint-type: '') {
    .grid--uniform {
      .#{$grid-breakpoint-type}one-half:nth-child(2n+1),
      .#{$grid-breakpoint-type}one-third:nth-child(3n+1),
      .#{$grid-breakpoint-type}one-quarter:nth-child(4n+1),
      .#{$grid-breakpoint-type}one-fifth:nth-child(5n+1),
      .#{$grid-breakpoint-type}one-sixth:nth-child(6n+1),
      .#{$grid-breakpoint-type}two-sixths:nth-child(3n+1),
      .#{$grid-breakpoint-type}three-sixths:nth-child(2n+1),
      .#{$grid-breakpoint-type}one-eighth:nth-child(8n+1),
      .#{$grid-breakpoint-type}two-eighths:nth-child(4n+1),
      .#{$grid-breakpoint-type}four-eighths:nth-child(2n+1),
      .#{$grid-breakpoint-type}five-tenths:nth-child(2n+1),
      .#{$grid-breakpoint-type}one-twelfth:nth-child(12n+1),
      .#{$grid-breakpoint-type}two-twelfths:nth-child(6n+1),
      .#{$grid-breakpoint-type}three-twelfths:nth-child(4n+1),
      .#{$grid-breakpoint-type}four-twelfths:nth-child(3n+1),
      .#{$grid-breakpoint-type}six-twelfths:nth-child(2n+1) { clear: both; }
    }
  }


@mixin spacing-classes($sizes) {
  $directions: ('left', 'right', 'top', 'bottom', 'all');

  @each $size in $sizes {
    $name: nth($size, 1);
    $value: nth($size, 2);

    @each $d in $directions {
      .margin-#{$d}-#{$name} {
        margin-#{$d}: #{$value};
      }

      .margin-#{$d}-#{$name}-i {
        margin-#{$d}: #{$value}!important;
      }

      .padding-#{$d}-#{$name} {
        padding-#{$d}: #{$value};
      }
    }
    
  }
}
